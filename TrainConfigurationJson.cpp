#include <stdlib.h>
#include <string.h>
#include "TrainConfigurationJson.h"
#include "TrainConfigurationIDs.h"
#include "Logger.h"

#define KEY_ID_ENTRY(_key, _id) { .key = _key, .id = _id }

struct TrainConfigurationKeyId {
	const char *key;
	unsigned int id;
};

static const struct TrainConfigurationKeyId keyIdDictionary[] =
{
	/* indicators */
	KEY_ID_ENTRY("ind_train_vel", CONFIGURATION_ID_HASLER_VELOCITY),
	KEY_ID_ENTRY("ind_train_dist", CONFIGURATION_ID_ODOMETER),
	KEY_ID_ENTRY("ind_volt_lv", CONFIGURATION_ID_VOLTMETER_LOW_VOLTAGE),
	KEY_ID_ENTRY("ind_amm_lv", CONFIGURATION_ID_AMMETER_LOW_VOLTAGE),
	KEY_ID_ENTRY("ind_volt_hv", CONFIGURATION_ID_VOLTMETER_HIGH_VOLTAGE),
	KEY_ID_ENTRY("ind_amm_hv1", CONFIGURATION_ID_AMMETER_HIGH_VOLTAGE1),
	KEY_ID_ENTRY("ind_amm_hv2", CONFIGURATION_ID_AMMETER_HIGH_VOLTAGE2),
	KEY_ID_ENTRY("ind_amm_hv3", CONFIGURATION_ID_AMMETER_HIGH_VOLTAGE3),
	KEY_ID_ENTRY("ind_press_tank", CONFIGURATION_ID_TANK_PRESSURE),
	KEY_ID_ENTRY("ind_press_line", CONFIGURATION_ID_PIPE_PRESSURE),
	KEY_ID_ENTRY("ind_press_break", CONFIGURATION_ID_BREAK_PRESSURE),
	KEY_ID_ENTRY("ind_atb", CONFIGURATION_ID_INDICATOR_SHP),
	KEY_ID_ENTRY("ind_alert", CONFIGURATION_ID_INDICATOR_ALERTER),
	KEY_ID_ENTRY("ind_buzz", CONFIGURATION_ID_INDICATOR_BUZZER),
	KEY_ID_ENTRY("ind_comp_ovrld", CONFIGURATION_ID_INDICATOR_COMPRESSOR_OVERLOAD),
	KEY_ID_ENTRY("ind_vent_ovrld", CONFIGURATION_ID_INDICATOR_VENTILATOR_OVERLOAD),
	KEY_ID_ENTRY("ind_line_break", CONFIGURATION_ID_INDICATOR_LINE_BREAKER),
	KEY_ID_ENTRY("ind_trac_eng_ovrld", CONFIGURATION_ID_INDICATOR_TRACTION_ENGINE_OVERLOAD),
	KEY_ID_ENTRY("ind_main_circ_diff", CONFIGURATION_ID_INDICATOR_MAIN_CIRCUIT_DIFFERENTIAL),
	KEY_ID_ENTRY("ind_conv_ovrld", CONFIGURATION_ID_INDICATOR_CONVERTER_OVERLOAD),
	KEY_ID_ENTRY("ind_line_contr", CONFIGURATION_ID_INDICATOR_LINE_CONTACTORS),
	KEY_ID_ENTRY("ind_wheelslip", CONFIGURATION_ID_INDICATOR_WHEELSLIP),
	KEY_ID_ENTRY("ind_high_start", CONFIGURATION_ID_INDICATOR_HIGH_START),
	KEY_ID_ENTRY("ind_resistor_ride", CONFIGURATION_ID_INDICATOR_RESTISTOR_RIDE),
	KEY_ID_ENTRY("ind_train_heat", CONFIGURATION_ID_INDICATOR_TRAIN_HEATING),
	/* switches */
	KEY_ID_ENTRY("sw_batt", CONFIGURATION_ID_SWITCH_BATTERY),
	KEY_ID_ENTRY("sw_cab_act", CONFIGURATION_ID_SWITCH_CABIN_ACTIVATION),
	KEY_ID_ENTRY("sw_legs_heat", CONFIGURATION_ID_SWITCH_LEGS_HEATING),
	KEY_ID_ENTRY("sw_cab_light_dimm", CONFIGURATION_ID_SWITCH_CABIN_LIGHT_DIMM),
	KEY_ID_ENTRY("sw_instr_light_dimm", CONFIGURATION_ID_SWITCH_MEASURE_INSTRUMENT_LIGHT_DIMM),
	KEY_ID_ENTRY("sw_singal_lamp_dimm", CONFIGURATION_ID_SWITCH_SIGNAL_LAMP1_DIMM),
	KEY_ID_ENTRY("sw_sign_lamp_red_left", CONFIGURATION_ID_SWITCH_SIGNAL_LAMP_RED_LEFT),
	KEY_ID_ENTRY("sw_sign_lamp_red_right", CONFIGURATION_ID_SWITCH_SIGNAL_LAMP_RED_RIGHT),
	KEY_ID_ENTRY("sw_cab_light", CONFIGURATION_ID_SWITCH_CABIN_LIGHT),
	KEY_ID_ENTRY("sw_instr_light", CONFIGURATION_ID_SWITCH_MEASURE_INSTRUMENT_LIGHT),
	KEY_ID_ENTRY("sw_sign_lamp_left", CONFIGURATION_ID_SWITCH_SIGNAL_LIGHT_LEFT),
	KEY_ID_ENTRY("sw_sign_lamp_top", CONFIGURATION_ID_SWITCH_SIGNAL_LIGHT_TOP),
	KEY_ID_ENTRY("sw_sign_lamp_right", CONFIGURATION_ID_SWITCH_SIGNAL_LIGHT_RIGHT),
	KEY_ID_ENTRY("sw_atb_signal_dimm", CONFIGURATION_ID_SWITCH_SHP_INDICATOR_DIMM),
	KEY_ID_ENTRY("sw_pant_a", CONFIGURATION_ID_SWITCH_PANTHOGRAPH_A),
	KEY_ID_ENTRY("sw_compr", CONFIGURATION_ID_SWITCH_COMPRESSOR),
	KEY_ID_ENTRY("sw_convrt", CONFIGURATION_ID_SWITCH_CONVERTER),
	KEY_ID_ENTRY("sw_alert_signal_dimm", CONFIGURATION_ID_SWITCH_ALERTER_INDICATOR_DIMM),
	KEY_ID_ENTRY("sw_pant_b", CONFIGURATION_ID_SWITCH_PANTHOGRAPH_B),
	KEY_ID_ENTRY("sw_train_heat", CONFIGURATION_ID_SWITCH_TRAIN_HEATING),
	KEY_ID_ENTRY("sw_volt_range", CONFIGURATION_ID_SWITCH_VOLTAGE_RANGE_MODE),
	KEY_ID_ENTRY("sw_break_mode", CONFIGURATION_ID_SWITCH_BREAK_MODE),
	KEY_ID_ENTRY("sw_radio_en", CONFIGURATION_ID_SWITCH_RADIO_ENABLE),
	KEY_ID_ENTRY("sw_radio_stop", CONFIGURATION_ID_SWITCH_RADIOSTOP),
	/* buttons */
	KEY_ID_ENTRY("bt_compr_ovrld_unl", CONFIGURATION_ID_BUTTON_COMPRESSOR_OVERLOAD_UNLOCK),
	KEY_ID_ENTRY("bt_line_break_en", CONFIGURATION_ID_BUTTON_LINE_BREAKER_ENABLE),
	KEY_ID_ENTRY("bt_line_break_dis", CONFIGURATION_ID_BUTTON_LINE_BREAKER_DISABLE),
	KEY_ID_ENTRY("bt_trac_eng_ovrld_unl", CONFIGURATION_ID_BUTTON_TRACTION_ENGINE_OVERLOAD_UNLOCK),
	KEY_ID_ENTRY("bt_conv_ovrld_unl", CONFIGURATION_ID_BUTTON_CONVERTER_OVERLOAD_UNLOCK),
	KEY_ID_ENTRY("bt_line_contr_dis", CONFIGURATION_ID_BUTTON_LINE_CONTACTORS_DISABLE),
	KEY_ID_ENTRY("bt_wheelslip_ca", CONFIGURATION_ID_BUTTON_WHEELSLIP_COUNTER_ACTION),
	KEY_ID_ENTRY("bt_relaxer", CONFIGURATION_ID_BUTTON_RELAXER),
	KEY_ID_ENTRY("bt_atb_alerter_reset", CONFIGURATION_ID_BUTTON_SHP_ALERTER_RESET),
	KEY_ID_ENTRY("bt_siren_low", CONFIGURATION_ID_BUTTON_SIREN_LOW),
	KEY_ID_ENTRY("bt_siren_high", CONFIGURATION_ID_BUTTON_SIREN_HIGH),
	KEY_ID_ENTRY("bt_radio_ext1", CONFIGURATION_ID_BUTTON_RADIO_EXT1),
	KEY_ID_ENTRY("bt_radio_ext3", CONFIGURATION_ID_BUTTON_RADIO_EXT3),
	/* controls */
	KEY_ID_ENTRY("ctrl_train_dir", CONFIGURATION_ID_CONTROLLER_TRAIN_DIRECTION),
	KEY_ID_ENTRY("ctrl_adjuster", CONFIGURATION_ID_CONTROLLER_ADJUSTER_WHEEL_POSITION),
	KEY_ID_ENTRY("ctrl_shunt", CONFIGURATION_ID_CONTROLLER_SHUNT_POSITION),
	KEY_ID_ENTRY("ctrl_main_break", CONFIGURATION_ID_MAIN_BREAK_VALUE),
	KEY_ID_ENTRY("ctrl_train_break", CONFIGURATION_ID_LOC_BREAK_VALUE),
	KEY_ID_ENTRY("ctrl_radio_chan", CONFIGURATION_ID_SWITCH_RADIO_CHANNEL),
	KEY_ID_ENTRY("ctrl_radio_vol", CONFIGURATION_ID_SWITCH_RADIO_VOLUME_LEVEL),
};

unsigned int TrainConfigurationJson::JsonKeyToId(const char *key)
{
	unsigned int result = (unsigned int) -1;
	unsigned int index;

	for (index = 0; index < sizeof(keyIdDictionary) / sizeof(keyIdDictionary[0]); index++)
	{
		if (strcmp(key, keyIdDictionary[index].key) == 0)
		{
			result = index;
			break;
		}
	}

	return result;
}

const char *TrainConfigurationJson::IdToJsonKey(unsigned int id)
{
	const char *result = NULL;
	unsigned int index;

	for (index = 0; index < sizeof(keyIdDictionary) / sizeof(keyIdDictionary[0]); index++)
	{
		if (keyIdDictionary[index].id == id)
		{
			result = keyIdDictionary[index].key;
			break;
		}
	}

	return result;
}
