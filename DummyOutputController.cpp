#include <stdlib.h>
#include <time.h>
#include "DummyOutputController.h"
#include "TrainConfigurationIDs.h"

#define RANDOM_ID(max_, id_) ((rand() % max_) == id_)
#define RANDOM_VALUE(x_) (rand() % x_)

#define DUMMY_OUTPUT_CONTROLLER_FLAG 0x1


DummyOutputController::DummyOutputController(Configuration *conf, bool dump_updates) : IDummyController(ControllerType::PHYS_CONTROLLER, dump_updates)
{
	this->conf = conf;
	this->conf->addFlags(CONFIGURATION_ID_BUTTON_RESERVE, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_BUTTON_COMPRESSOR_OVERLOAD_UNLOCK, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_BUTTON_LINE_BREAKER_DISABLE, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_BUTTON_LINE_BREAKER_ENABLE, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_BUTTON_TRACTION_ENGINE_OVERLOAD_UNLOCK, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_BUTTON_CONVERTER_OVERLOAD_UNLOCK, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_BUTTON_LINE_CONTACTORS_DISABLE, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_BUTTON_WHEELSLIP_COUNTER_ACTION, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_BUTTON_RELAXER, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_BUTTON_SHP_ALERTER_RESET, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_BUTTON_SIREN_LOW, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_BUTTON_SIREN_HIGH, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_BATTERY, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_CABIN_ACTIVATION, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_LEGS_HEATING, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_CABIN_LIGHT_DIMM, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_MEASURE_INSTRUMENT_LIGHT_DIMM, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_SIGNAL_LAMP1_DIMM, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_SIGNAL_LAMP2_DIMM, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_SIGNAL_LAMP_RED_LEFT, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_RESERVE, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_SIGNAL_LAMP_RED_RIGHT, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_MAIN_LIGHT, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_CABIN_LIGHT, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_MEASURE_INSTRUMENT_LIGHT, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_HIGH_VOLTAGE_BOX_LIGHT, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_SIGNAL_LIGHT_LEFT, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_SIGNAL_LIGHT_TOP, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_SIGNAL_LIGHT_RIGHT, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_SHP_INDICATOR_DIMM, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_PANTHOGRAPH_A, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_COMPRESSOR, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_CONVERTER, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_ALERTER_INDICATOR_DIMM, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_PANTHOGRAPH_B, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_TRAIN_HEATING, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_BREAK_MODE, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_WHEEL_PUSH_MODE, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_VOLTAGE_RANGE_MODE, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_SIGNAL_LIGHT1_DIMM, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_SIGNAL_LIGHT2_DIMM, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_WIPERS_MODE, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_CONTROLLER_TRAIN_DIRECTION, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_CONTROLLER_ADJUSTER_WHEEL_POSITION, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_CONTROLLER_SHUNT_POSITION, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_MAIN_BREAK_VALUE, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_LOC_BREAK_VALUE, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_RADIO_ENABLE, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_RADIO_CHANNEL, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_RADIO_VOLUME_LEVEL, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_SWITCH_RADIOSTOP, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_BUTTON_RADIO_EXT1, DUMMY_OUTPUT_CONTROLLER_FLAG);
	this->conf->addFlags(CONFIGURATION_ID_BUTTON_RADIO_EXT3, DUMMY_OUTPUT_CONTROLLER_FLAG);

	srand(time(NULL));
}

DummyOutputController::~DummyOutputController()
{

}

void DummyOutputController::sync(IController::SyncDirection dir)
{
	if (dir == IController::SyncDirection::FROM_CONTROLLER) {

		/* initial condition to limit number of updates */
		if (RANDOM_VALUE(10) > 8) {

			/* randomize number of updates */
			unsigned int count = RANDOM_VALUE(10);

			this->conf->accessLock();

			for (unsigned int i = 0; i < count; i++) {
				unsigned int id = RANDOM_VALUE(CONFIGURATION_ID_MAX);
				if (this->conf->getFlags(id) & DUMMY_OUTPUT_CONTROLLER_FLAG)
					this->conf->setValue(id, RANDOM_VALUE(this->conf->getMaxValue(id)));
			}

			this->conf->accessUnlock();
		}
	} else {
		if (this->dump_updates) {
			this->conf->accessLock();
			this->conf->dumpConfigUpdates();
			this->conf->cleanUpdates();
			this->conf->accessUnlock();
		}
	}
}
